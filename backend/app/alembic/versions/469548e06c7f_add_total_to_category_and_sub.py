"""add total to category and sub

Revision ID: 469548e06c7f
Revises: 9ff2e4ef8486
Create Date: 2025-03-26 18:07:56.360384

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
from sqlalchemy import select, Column, Float


# revision identifiers, used by Alembic.
revision = '469548e06c7f'
down_revision = '9ff2e4ef8486'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('category', sa.Column('total', sa.Float(), nullable=False, server_default='0.0'))
    op.add_column('subcategory', sa.Column('total', sa.Float(), nullable=False, server_default='0.0'))
    # ### end Alembic commands ###

    # Update the totals based on existing data
    # This is executed automatically in the migration
    # For a large database, use the separate script app/update_totals.py instead
    bind = op.get_bind()
    session = Session(bind=bind)

    try:
        # Get all expenses with category_id
        expenses_with_category = session.execute(
            """
            SELECT category_id, SUM(amount) as total
            FROM expense
            WHERE category_id IS NOT NULL
            GROUP BY category_id
            """
        ).fetchall()

        # Update category totals from expenses
        for category_id, total in expenses_with_category:
            session.execute(
                f"""
                UPDATE category
                SET total = {total}
                WHERE id = {category_id}
                """
            )

        # Get incomes with subcategory_id and join to subcategory to get category_id
        # Income doesn't have direct category_id, need to get it through subcategory
        incomes_with_category = session.execute(
            """
            SELECT s.category_id, SUM(i.amount) as total
            FROM income i
            JOIN subcategory s ON i.subcategory_id = s.id
            WHERE i.subcategory_id IS NOT NULL AND s.category_id IS NOT NULL
            GROUP BY s.category_id
            """
        ).fetchall()

        # Update category totals from incomes (via subcategories)
        for category_id, total in incomes_with_category:
            session.execute(
                f"""
                UPDATE category
                SET total = category.total + {total}
                WHERE id = {category_id}
                """
            )

        # Get all expenses with subcategory_id
        expenses_with_subcategory = session.execute(
            """
            SELECT subcategory_id, SUM(amount) as total
            FROM expense
            WHERE subcategory_id IS NOT NULL
            GROUP BY subcategory_id
            """
        ).fetchall()

        # Update subcategory totals from expenses
        for subcategory_id, total in expenses_with_subcategory:
            session.execute(
                f"""
                UPDATE subcategory
                SET total = {total}
                WHERE id = {subcategory_id}
                """
            )

        # Get all incomes with subcategory_id
        incomes_with_subcategory = session.execute(
            """
            SELECT subcategory_id, SUM(amount) as total
            FROM income
            WHERE subcategory_id IS NOT NULL
            GROUP BY subcategory_id
            """
        ).fetchall()

        # Update subcategory totals from incomes
        for subcategory_id, total in incomes_with_subcategory:
            session.execute(
                f"""
                UPDATE subcategory
                SET total = subcategory.total + {total}
                WHERE id = {subcategory_id}
                """
            )

        session.commit()
    except Exception as e:
        session.rollback()
        print(f"Error updating totals: {e}")
    finally:
        session.close()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('subcategory', 'total')
    op.drop_column('category', 'total')
    # ### end Alembic commands ###
