"""add colors to accounts

Revision ID: 9ff2e4ef8486
Revises: 4410f9cfa10e
Create Date: 2025-03-21 17:34:53.464556

"""
from alembic import op
import sqlalchemy as sa
import random
from sqlalchemy.sql import text


# revision identifiers, used by Alembic.
revision = '9ff2e4ef8486'
down_revision = '4410f9cfa10e'
branch_labels = None
depends_on = None


# List of colors from the provided palette
COLORS = [
    # Blues
    "#168FFF", "#0047AB", "#0040FF", "#1E78FF", "#00BFFF",
    # Greens
    "#17CB49", "#00A550", "#39FF14", "#008F11", "#7FFF00",
    # Reds
    "#F74141", "#FF3131", "#B22222", "#D92525", "#E34234",
    # Oranges
    "#FF9F2D", "#FF4500", "#FF5F1F", "#E85D04", "#D17B0F",
    # Yellows
    "#FFD700", "#E7FF33", "#FFFB2C", "#F4AF30", "#E4D00A",
    # Purples
    "#A32CC4", "#9400D3", "#6F2DA8", "#800080", "#D400FF",
    # Pinks
    "#FF1493", "#FF007F", "#FF69B4", "#D100D1", "#E75480"
]

def upgrade():
    # First add the column as nullable to allow updating existing rows
    op.add_column('account', sa.Column('color', sa.String(), nullable=True))

    # Get connection
    connection = op.get_bind()

    # Get all account IDs
    accounts = connection.execute(text("SELECT id FROM account")).fetchall()

    # Update each account with a random color
    for account in accounts:
        random_color = random.choice(COLORS)
        connection.execute(
            text("UPDATE account SET color = :color WHERE id = :id"),
            {"color": random_color, "id": account[0]}
        )

    # Make the column non-nullable after populating data
    if accounts:
        op.alter_column('account', 'color', nullable=False)
    else:
        # If no accounts exist, just set a default value for future records
        op.execute("ALTER TABLE account ALTER COLUMN color SET DEFAULT '#168FFF'")
        op.alter_column('account', 'color', nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('account', 'color')
    # ### end Alembic commands ###
